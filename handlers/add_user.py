from telegram import Update
from telegram.ext import ContextTypes, CommandHandler
from app.db import GetDB, crud
from app.db.schemas import UserCreate  # –ò–º–ø–æ—Ä—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –ø—Ä–æ–≤–µ—Ä—å —É —Å–µ–±—è
from control import ADMIN

def is_authorized(user_id):
    return user_id in ADMIN

async def add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_user.id):
        return await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")

    args = context.args
    if len(args) != 3:
        return await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /adduser <–∏–º—è> <—Ç—Ä–∞—Ñ–∏–∫_–ì–ë> <–¥–Ω–µ–π>")

    username, traffic_str, days_str = args

    try:
        traffic = int(traffic_str)
        days = int(days_str)
    except ValueError:
        return await update.message.reply_text("‚ùå –¢—Ä–∞—Ñ–∏–∫ –∏ —Å—Ä–æ–∫ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç UserCreate —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–æ–ª—è–º–∏.
    new_user = UserCreate(
        username=username,
        data_limit=traffic * (1024 ** 3),  # –ì–ë –≤ –±–∞–π—Ç—ã
        expire=days,
        # –î–æ–±–∞–≤—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    )

    try:
        with GetDB() as db:
            db_user = crud.create_user(db, new_user)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{username}` —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{e}")

def get_add_user_handler():
    return CommandHandler("adduser", add_user)
